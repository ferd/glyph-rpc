glyph is a serialization format roughly based around bencoding
with support for hypermedia types (links, forms).




	strings!:
		utf-8 string -> u <byte len> \x0a <utf-8 string>
	bytes!
		byte array -> b <byte len> \x0a  <byte array>

	numbers:
		utc datetime -> d %Y-%m-%dT%H:%M:%S.%fZ \x0a
			note: currently only UTC times supported,
				  so all datetimes must end with Z

		num -> i <number> \x0a
			arbitrary precision whole number

		float -> f <float in hex> \x0a
			float or double - the hex format is from
			c99 (-)0xMANTISSAp(-)EXPONENT
		   
			

	collections:
		list -> L <item> <item> <item> <item>....E
			
		dict -> D <key> <value> <key> <value>....E
			no duplicates allowed

		set  -> S <item> <item> <item> <item>....E
			no duplicates


	singleton datatypes:
		true -> T
		false -> F
		none -> N

	xml like three item tuples (name, attributes, content)
		node -> X<name item><attr item><content item>
			an object with a name, attributes and content
				attributes is nominally a dict.
				content nominally list
			think html5 microdata like

	hypermedia types/extensions: 
		ext -> H<name item><attr item><content item>
			like a node, but contains url, method, possibly form values.

	currently the following extensions are defined:
		resource, link, form and embed

		all dictionary keys *should* be utf-8

		link:   
			name is "link"
			attr is a dict, containing the following keys:
				url, method
				
			content is None

		form:   
			name is "form"
			attr is a dict, containing the following keys:
				url, method
				
			content is currently a list of names
			for the form to submit

			currently to submit a form, a dictionary is sent back

		embed
			name is "embed"
			attr is a dict, containing the following keys:
				url, method
				
			content is the object that would be returned
			from fetching that link

		
		resource
			name is "resource"
			attr is a dict, containing the following keys:
				url

			content is a dict of resource attributes
				often forms
				

	notes:
		all strings are in utf-8.
		should be no bytestrings in dicts?
				

	whitespace/newlines
		parser can ignore whitespace when it is safe to do so
		parser can treat CRLF as LF


	unordered collections:
		for the unordered collections, it is recommended
		to order them in some way, such that the serializing
		is consistent within the library, i.e

			dump(dict) equals dump(parse(dump(dict)))

		but the ordering is ignored when reading.

	todo: timezones, periods?
	todo: examples/where unicode goes.

